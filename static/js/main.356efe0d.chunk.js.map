{"version":3,"sources":["utils/_DATA.js","utils/api.js","actions/shared.js","actions/users.js","actions/questions.js","components/Avatar.js","components/PollCard.js","components/Questionslist.js","actions/loggedinuser.js","components/Dashboard.js","components/Userstats.js","components/Leaderboard.js","components/Newquestion.js","components/User.js","components/Userlist.js","components/Login.js","components/Nav.js","components/PollStats.js","components/Answer.js","components/Notfound.js","components/Poll.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/users.js","reducers/questions.js","reducers/loggedinuser.js","middleware/index.js","index.js"],"names":["users","sarahedo","id","name","avatarURL","answers","am8ehyc8byjqgar0jgpub9","loxhs1bqm25b708cmbf3g","questions","tylermcginnis","vthrdm985a262al8qx3do","xj352vofupe1dqz9emx13r","johndoe","author","timestamp","optionOne","votes","text","optionTwo","_saveQuestion","question","Promise","res","rej","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","setTimeout","concat","saveAnswer","info","qid","answer","_saveQuestionAnswer","populateStore","dispatch","all","then","type","setUsers","setQuestions","catch","alert","handleSetAnswer","votingA","vote","questionId","userId","addUserAnswer","error","removeUserAnswer","handleSaveQuestion","questionData","err","Avatar","props","src","avatarUrl","alt","style","width","PollCard","questionDateString","toLocaleDateString","timeZone","Card","minWidth","maxWidth","margin","className","Body","Header","Img","variant","as","Text","Subtitle","to","pathname","Button","QuestionsList","questionsKeys","Object","keys","answeredQuestionsKeys","loggedInUser","Row","Col","answered","filter","includes","sort","a","b","map","filteredQuestionId","key","setDisplayAnsweredQuestions","display","Dashboard","useDispatch","useSelector","state","showAnswered","displayAnsweredQuestions","Container","sx","disabled","onClick","UserStats","length","Leaderboard","usersIds","NewQuestion","useState","setOptionOneText","setOptionTwoText","submitted","setSubmitted","xs","sm","Form","onSubmit","e","preventDefault","handleSubmit","Group","controlId","Label","Control","size","rows","placeholder","onChange","target","value","maxLength","required","User","user","Userlist","usersArr","userKey","Login","MyNav","location","useLocation","Nav","fill","defaultActiveKey","Item","Link","eventKey","PollStats","bg","textForOne","userAnsweredOne","Badge","percentageForOne","toFixed","ProgressBar","label","percentageForTwo","votesForOne","votesForTwo","textForTwo","Answer","setVote","userAnsweredTwo","userAnswered","votesPercentage","userAnswersOne","handleVote","Check","inline","defaultChecked","checked","Notfound","Poll","path","match","useRouteMatch","replace","questionDate","component","App","useEffect","exact","Boolean","window","hostname","combineReducers","action","reduce","obj","applyMiddleware","thunk","logger","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","middleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"2TAAIA,EAAQ,CACVC,SAAU,CACRC,GAAI,WACJC,KAAM,YACNC,UAAW,SACXC,QAAS,CACP,yBAA0B,YAC1B,uBAAwB,YACxBC,uBAAwB,YACxBC,sBAAuB,aAEzBC,UAAW,CAAC,yBAA0B,2BAExCC,cAAe,CACbP,GAAI,gBACJC,KAAM,iBACNC,UAAW,SACXC,QAAS,CACPK,sBAAuB,YACvBC,uBAAwB,aAE1BH,UAAW,CAAC,wBAAyB,0BAEvCI,QAAS,CACPV,GAAI,UACJC,KAAM,WACNC,UAAW,SACXC,QAAS,CACPM,uBAAwB,YACxBD,sBAAuB,YACvB,uBAAwB,aAE1BF,UAAW,CAAC,uBAAwB,4BAIpCA,EAAY,CACd,yBAA0B,CACxBN,GAAI,yBACJW,OAAQ,WACRC,UAAW,cACXC,UAAW,CACTC,MAAO,CAAC,YACRC,KAAM,mCAERC,UAAW,CACTF,MAAO,GACPC,KAAM,mCAGV,uBAAwB,CACtBf,GAAI,uBACJW,OAAQ,UACRC,UAAW,cACXC,UAAW,CACTC,MAAO,GACPC,KAAM,sBAERC,UAAW,CACTF,MAAO,CAAC,UAAW,YACnBC,KAAM,0BAGVX,uBAAwB,CACtBJ,GAAI,yBACJW,OAAQ,WACRC,UAAW,cACXC,UAAW,CACTC,MAAO,GACPC,KAAM,kBAERC,UAAW,CACTF,MAAO,CAAC,YACRC,KAAM,kBAGVV,sBAAuB,CACrBL,GAAI,wBACJW,OAAQ,gBACRC,UAAW,cACXC,UAAW,CACTC,MAAO,GACPC,KAAM,4BAERC,UAAW,CACTF,MAAO,CAAC,YACRC,KAAM,4BAGVP,sBAAuB,CACrBR,GAAI,wBACJW,OAAQ,gBACRC,UAAW,cACXC,UAAW,CACTC,MAAO,CAAC,iBACRC,KAAM,qBAERC,UAAW,CACTF,MAAO,CAAC,WACRC,KAAM,oCAGVN,uBAAwB,CACtBT,GAAI,yBACJW,OAAQ,UACRC,UAAW,cACXC,UAAW,CACTC,MAAO,CAAC,WACRC,KAAM,oBAERC,UAAW,CACTF,MAAO,CAAC,iBACRC,KAAM,iBAwCL,SAASE,EAAcC,GAC5B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAaJ,EAASP,OACtBY,EAnBV,YAAmE,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,cAAed,EAAU,EAAVA,OACtD,MAAO,CACLX,GAnBA0B,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IACxCH,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAmBxCjB,UAAWkB,KAAKC,MAChBpB,SACAE,UAAW,CACTC,MAAO,GACPC,KAAMS,GAERR,UAAW,CACTF,MAAO,GACPC,KAAMU,IAQkBO,CAAed,GAEzCe,YAAW,WACT3B,EAAS,2BACJA,GADI,kBAENiB,EAAkBvB,GAAKuB,IAG1BzB,EAAK,2BACAA,GADA,kBAEFwB,EAFE,2BAGExB,EAAMwB,IAHR,IAIDhB,UAAWR,EAAMwB,GAAYhB,UAAU4B,OAAO,CAACX,EAAkBvB,SAIrEoB,EAAIG,KACH,QCtIA,SAASY,EAAWC,GACzB,ODyIK,YAA2D,IAA5Bd,EAA2B,EAA3BA,WAAYe,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OAErD,OAAO,IAAInB,SAAQ,SAACC,EAAKC,GACvBY,YAAW,WACTnC,EAAK,2BACAA,GADA,kBAEFwB,EAFE,2BAGExB,EAAMwB,IAHR,IAIDnB,QAAQ,2BACHL,EAAMwB,GAAYnB,SADhB,kBAEJkC,EAAMC,QAKbhC,EAAS,2BACJA,GADI,kBAEN+B,EAFM,2BAGF/B,EAAU+B,IAHR,kBAIJC,EAJI,2BAKAhC,EAAU+B,GAAKC,IALf,IAMHxB,MAAOR,EAAU+B,GAAKC,GAAQxB,MAAMoB,OAAO,CAACZ,UAKlDF,MACC,QCpKEmB,CAAoBH,GCZtB,SAASI,IACd,OAAO,SAACC,GACN,ODTKtB,QAAQuB,IAAI,CDyGZ,IAAIvB,SAAQ,SAACC,EAAKC,GACvBY,YAAW,kBAAMb,EAAI,eAAKtB,MAAU,QAK/B,IAAIqB,SAAQ,SAACC,EAAKC,GACvBY,YAAW,kBAAMb,EAAI,eAAKd,MAAc,UChHSqC,MACjD,YAAyB,IAAD,mBACtB,MAAO,CACL7C,MAFoB,KAGpBQ,UAHoB,SCQEqC,MAAK,YAA2B,IAAxB7C,EAAuB,EAAvBA,MAAOQ,EAAgB,EAAhBA,UACvCmC,ECVC,SAAkB3C,GACvB,MAAO,CACL8C,KAnBqB,gBAoBrB9C,SDOW+C,CAAS/C,IAClB2C,EETC,SAAsBnC,GAC3B,MAAO,CACLsC,KArByB,gBAsBzBtC,aFMWwC,CAAaxC,OAEvByC,OAAO,WACNC,MAAM,2EAaL,SAASC,EAAgBb,GAC9B,OAAO,SAACK,GACN,IEoBG,EAjCA,EFaGS,EAAwB,cAAdd,EAAKe,KACXV,EAAVS,EEbK,CACLN,KAlCmC,iBAmCnCQ,YAHG,EFcqChB,GEdLgB,WAKnCC,OALyD,EAAVA,QAkC1C,CACLT,KAjEmC,iBAkEnCQ,YAHG,EFnB4EhB,GEmB5CgB,WAInCC,OAJyD,EAAVA,SFlB/CZ,ECjBG,YAAsD,IAA7BW,EAA4B,EAA5BA,WAC9B,MAAO,CACLR,KAhC2B,kBAiC3BS,OAHwD,EAAhBA,OAGhCD,aAAYD,KAHoC,EAARA,MDiBvCG,CAAclB,IAGvBD,EADmB,CAAEb,WADyCc,EAAtDiB,OACyBhB,IAD6BD,EAAlCgB,WACUd,OADwBF,EAAjBe,OAG1CJ,OAAM,SAACQ,GE8BP,MAhCA,EFGUd,EAAVS,EEFE,CACLN,KAlDqC,mBAmDrCQ,YAHG,EFG0ChB,GEHRgB,WAIrCC,OAJ2D,EAAVA,QAiC5C,CACLT,KAhFqC,iBAiFrCQ,YAHG,EF7BmFhB,GE6BjDgB,WAIrCC,OAJ2D,EAAVA,SF5B7CZ,ECTD,YAAyD,IAA7BW,EAA4B,EAA5BA,WACjC,MAAO,CACLR,KA7C8B,qBA8C9BS,OAH2D,EAAhBA,OAGnCD,aAAYD,KAHuC,EAARA,MDStCK,CAAiBpB,IAC1BY,MAAM,uEAcP,SAASS,EAAmBC,GACjC,OAAO,SAACjB,GACN,ODzByBL,ECyBLsB,EDxBfzC,EAAcmB,ICyBhBO,MAAK,SAACvB,GE2BN,MDvC0BgC,EDazBX,EE2BC,CACLG,KAhGwB,eAiGxB5C,IAHG,EF1BsBoB,GE0BCpB,GAI1BW,OAJyE,EAA3CA,OAK9BE,UALyE,EAAnCA,UAMtCG,UANyE,EAAxBA,UAOjDJ,UAPyE,EAAbA,YFzBxD6B,GCdyBW,EDcAhC,EAAIpB,GCb5B,CACL4C,KA3D6B,oBA4D7BS,ODWqCjC,EAAIT,OCXjCyC,mBDaLL,OAAM,SAACY,GACNX,MAAM,oED/BP,IAAsBZ,G,mBIpCd,SAASwB,EAAOC,GAC7B,OAEE,yBACEC,IAAK,qBAAuBD,EAAME,UAClCC,IAAKH,EAAM5D,KAAO,UAClBgE,MAAO,CAAEC,MAAO,S,oBCHP,SAASC,EAASN,GAC/B,IACIO,EADe,IAAItC,KAAK+B,EAAM3C,SAASN,WACLyD,mBAAmB,QAAS,CAChEC,SAAU,QAEZ,OACE,kBAACC,EAAA,EAAD,CAAMN,MAAO,CAAEO,SAAU,QAASC,SAAU,QAASC,OAAQ,QAAUC,UAAU,oBAC/E,kBAACJ,EAAA,EAAKK,KAAN,KACA,kBAACL,EAAA,EAAKM,OAAN,KACChB,EAAM/D,MAAM+D,EAAM3C,SAASP,QAAQV,MAElC,kBAACsE,EAAA,EAAKO,IAAN,CACEC,QAAQ,MACRC,GAAIpB,EACJ3D,KAAM4D,EAAM/D,MAAM+D,EAAM3C,SAASP,QAAQV,KACzC8D,UAAWF,EAAM/D,MAAM+D,EAAM3C,SAASP,QAAQT,YAEhD,kBAACqE,EAAA,EAAKU,KAAN,CAAWN,UAAU,aAArB,YACSP,GAET,kBAACG,EAAA,EAAKW,SAAN,CAAeP,UAAU,wBAAzB,uBAMA,kBAAC,IAAD,CAAMA,UAAU,cACdQ,GAAI,CACFC,SAAS,+BAAD,OAAiCvB,EAAM3C,SAASlB,MAG1D,kBAACqF,EAAA,EAAD,CAAQN,QAAQ,WAAhB,gB,oBC/BK,SAASO,EAAczB,GAEpC,IAAM0B,EAAgBC,OAAOC,KAAK5B,EAAMvD,WAElCoF,EAAwBF,OAAOC,KACnC5B,EAAM/D,MAAM+D,EAAM8B,aAAa3F,IAAIG,SAErC,OACE,oCACE,kBAACyF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uBAAGlB,UAAU,oBACVd,EAAMiC,SACH,0BACA,+BAIV,kBAACF,EAAA,EAAD,KACG/B,EAAMiC,SACHP,EACGQ,QAAO,SAAC3C,GACP,OAAOsC,EAAsBM,SAAS5C,MAEvC6C,MAAK,SAACC,EAAGC,GACR,OACEtC,EAAMvD,UAAU6F,GAAGvF,UAAYiD,EAAMvD,UAAU4F,GAAGtF,aAGrDwF,KAAI,SAACC,GACJ,OACE,kBAACR,EAAA,EAAD,CAAKS,IAAKD,GACR,kBAAClC,EAAD,CACEnE,GAAIqG,EACJnF,SAAU2C,EAAMvD,UAAU+F,GAC1BV,aAAc9B,EAAM8B,aACpB7F,MAAO+D,EAAM/D,YAKvByF,EACGQ,QAAO,SAAC3C,GACP,OAAQsC,EAAsBM,SAAS5C,MAExC6C,MAAK,SAACC,EAAGC,GACR,OACEtC,EAAMvD,UAAU6F,GAAGvF,UAAYiD,EAAMvD,UAAU4F,GAAGtF,aAGrDwF,KAAI,SAACC,GACJ,OACE,kBAACR,EAAA,EAAD,CAAKS,IAAKD,GACR,kBAAClC,EAAD,CACEnE,GAAIqG,EACJnF,SAAU2C,EAAMvD,UAAU+F,GAC1BV,aAAc9B,EAAM8B,aACpB7F,MAAO+D,EAAM/D,cCvC5B,SAASyG,EAA4BC,GAC1C,MAAO,CACL5D,KAhC0C,iCAiC1C4D,W,YCvBW,SAASC,EAAU5C,GAEhC,IAAMpB,EAAWiE,cAEXpG,EAAYqG,aAAY,SAACC,GAAD,OAAWA,EAAMtG,aAEzCR,EAAQ6G,aAAY,SAACC,GAAD,OAAWA,EAAM9G,SAErC+G,EAAeF,aACnB,SAACC,GAAD,OAAWA,EAAMjB,aAAamB,4BAGhC,OACE,kBAACC,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIlB,UAAU,yBAAd,8BAGJ,kBAACiB,EAAA,EAAD,CAAKjB,UAAU,gCACb,kBAACkB,EAAA,EAAD,CAAKmB,GAAG,IAAIrC,UAAU,kBACpB,kBAACU,EAAA,EAAD,CACEN,QAAQ,UACRkC,UAAWJ,IAAgB,EAC3BK,QAAS,WACPzE,EAAS8D,EAA4B,SAJzC,eAUF,kBAACV,EAAA,EAAD,CAAKmB,GAAG,IAAIrC,UAAU,iBACpB,kBAACU,EAAA,EAAD,CACEN,QAAQ,UACRkC,SAAUJ,IAAgB,EAC1BK,QAAS,WACPzE,EAAS8D,GAA4B,MAJzC,cAYJ,kBAACjB,EAAD,CACEQ,SAAUe,EACVvG,UAAWA,EACXqF,aAAc9B,EAAM8B,aACpB7F,MAAOA,KChDA,SAASqH,EAAUtD,GAChC,OACE,kBAACgC,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,CACEN,MAAO,CAAEO,SAAU,QAASC,SAAU,QAASC,OAAQ,QACvDC,UAAU,2CAEV,kBAACJ,EAAA,EAAKK,KAAN,KACA,kBAACL,EAAA,EAAKM,OAAN,KAAchB,EAAM/D,MAAM+D,EAAM7D,IAAIC,MACpC,kBAACsE,EAAA,EAAKO,IAAN,CACEH,UAAU,qCACVI,QAAQ,MACRC,GAAIpB,EACJ3D,KAAM4D,EAAM/D,MAAM+D,EAAM7D,IAAIC,KAC5B8D,UAAWF,EAAM/D,MAAM+D,EAAM7D,IAAIE,YAGnC,kBAACqE,EAAA,EAAKU,KAAN,CAAWN,UAAU,QAArB,cACcd,EAAM/D,MAAM+D,EAAM7D,IAAIM,UAAU8G,QAE9C,kBAAC7C,EAAA,EAAKU,KAAN,iBACYO,OAAOC,KAAK5B,EAAM/D,MAAM+D,EAAM7D,IAAIG,SAASiH,QAEvD,kBAAC7C,EAAA,EAAKU,KAAN,cACS,IACNpB,EAAM/D,MAAM+D,EAAM7D,IAAIM,UAAU8G,OAC/B5B,OAAOC,KAAK5B,EAAM/D,MAAM+D,EAAM7D,IAAIG,SAASiH,WCzBxC,SAASC,IAEtB,IAAMvH,EAAQ6G,aAAY,SAACC,GAAD,OAAWA,EAAM9G,SAErCwH,EAAW9B,OAAOC,KAAK3F,GAC7B,OACE,kBAACiH,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAACY,EAAA,EAAD,CAAKjB,UAAU,QACb,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,eACf,wBAAIA,UAAU,QAAd,iBAGF,kBAACiB,EAAA,EAAD,CAAKjB,UAAU,QACZ2C,EACErB,MAAK,SAACC,EAAGC,GACR,OACEX,OAAOC,KAAK3F,EAAMqG,GAAGhG,SAASiH,OAC9BtH,EAAMqG,GAAG7F,UAAU8G,QAClB5B,OAAOC,KAAK3F,EAAMoG,GAAG/F,SAASiH,OAAStH,EAAMoG,GAAG5F,UAAU8G,WAG9DhB,KAAI,SAAC/C,GACJ,OAAO,kBAAC8D,EAAD,CAAWb,IAAKjD,EAAQrD,GAAIqD,EAAQvD,MAAOA,S,YCtB/C,SAASyH,EAAY1D,GAAO,MAEC2D,mBAAS,IAFV,mBAElChG,EAFkC,KAEnBiG,EAFmB,OAGCD,mBAAS,IAHV,mBAGlC/F,EAHkC,KAGnBiG,EAHmB,OAKPF,mBAAS,IALF,mBAKlCG,EALkC,KAKvBC,EALuB,KAMnCnF,EAAWiE,cAqBjB,OAAOiB,EACL,kBAAC,IAAD,CACExC,GAAI,CACFC,SAAU,wBAId,kBAAC2B,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlB,UAAU,mBACb,gDAGJ,kBAACiB,EAAA,EAAD,CAAMjB,UAAU,0BACd,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,mBAAmBkD,GAAG,KAAKC,GAAG,KAC3C,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAACC,GAAD,OA3BxB,SAAsBA,GACpBA,EAAEC,iBACF,IAAMxE,EAAe,CACnB/C,OAAQkD,EAAM8B,aAAa3F,GAC3BwB,gBACAC,iBAEFgB,EAASgB,EAAmBC,IAAef,MAAK,SAACvB,GAE/CwG,GAAa,MAkBcO,CAAaF,KAClC,kBAACF,EAAA,EAAKK,MAAN,CAAYC,UAAU,iBACpB,kBAACN,EAAA,EAAKO,MAAN,2BACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,KACLxD,GAAG,WACHyD,KAAK,IACLC,YAAY,mBACZC,SAAU,SAACV,GAAD,OA1CUlH,EA0CsBkH,EAAEW,OAAOC,WAzC/DpB,EAAiB1G,GADnB,IAAkCA,GA2CpB8H,MAAOrH,EACPsH,UAAW,IACXC,UAAQ,KAGZ,kBAAChB,EAAA,EAAKK,MAAN,CAAYC,UAAU,iBACpB,kBAACN,EAAA,EAAKO,MAAN,aACA,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,KACLxD,GAAG,WACHyD,KAAK,IACLC,YAAY,mBACZC,SAAU,SAACV,GAAD,OApDUlH,EAoDsBkH,EAAEW,OAAOC,WAnD/DnB,EAAiB3G,GADnB,IAAkCA,GAqDpB8H,MAAOpH,EACPqH,UAAW,IACXC,UAAQ,KAGZ,kBAAC1D,EAAA,EAAD,CAAQzC,KAAK,SAAS+B,UAAU,OAAOI,QAAQ,UAAU8D,MAAM,UAA/D,iBCtEG,SAASG,EAAKnF,GAC3B,IAAMpB,EAAWiE,cAEjB,OACE,kBAACb,EAAA,EAAD,CAAKiC,GAAG,MACN,kBAACzC,EAAA,EAAD,CAAQN,QAAQ,UAAUJ,UAAU,MAClCuC,QAAS,WACPzE,ELDD,CACLG,KAlB8B,qBAmB9BqG,KKD+BpF,EAAMoF,SAGhCpF,EAAM5D,OCbA,SAASiJ,IAEtB,IAAMpJ,EAAQ6G,aAAY,SAACC,GAAD,OAAWA,EAAM9G,SAErCqJ,EAAW3D,OAAOC,KAAK3F,GAC7B,OACE,kBAAC8F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,wBAAIlB,UAAU,oBAAd,gBACA,kBAACiB,EAAA,EAAD,CAAKjB,UAAU,oBACZwE,EAAS/C,KAAI,SAACgD,GACb,OACE,kBAACJ,EAAD,CACE1C,IAAKxG,EAAMsJ,GAASpJ,GACpBC,KAAMH,EAAMsJ,GAASnJ,KACrBgJ,KAAMnJ,EAAMsJ,WCfX,SAASC,IACtB,OACE,kBAACtC,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAAC,EAAD,O,YCCS,SAASsE,EAAMzF,GAC5B,IAAMpB,EAAWiE,cACX6C,EAAWC,cAEjB,OACE,kBAACC,EAAA,EAAD,CAAKC,MAAI,EAAC3E,QAAQ,QAAQ4E,iBAAkBJ,EAASnE,UACnD,kBAACqE,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAU7E,GAAI6E,IAAM1E,GAAG,qBAAqB2E,SAAS,sBAArD,cAIF,kBAACL,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAU7E,GAAI6E,IAAM1E,GAAG,wBAAwB2E,SAAS,yBAAxD,aAIF,kBAACL,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAU7E,GAAI6E,IAAM1E,GAAG,gCAAgC2E,SAAS,iCAAhE,gBAKDjG,EAAM8B,cACL,oCACE,kBAAC8D,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAU5C,UAAQ,EAAC6C,SAAS,YAA5B,SACSjG,EAAM8B,aAAa1F,OAI9B,kBAACwJ,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CACEC,SAAS,SACT5C,QAAS,WACPzE,ERCP,CACLG,KA9CkB,aQyCV,a,oBC3BG,SAASmH,EAAUlG,GAChC,OACE,oCACE,kBAACU,EAAA,EAAD,CAAMI,UAAU,oBACd,kBAACJ,EAAA,EAAKM,OAAN,CAAaG,GAAG,MAAhB,WAEA,kBAACT,EAAA,EAAD,CAAMI,UAAU,kBAAkBqF,GAAG,SACnC,kBAACzF,EAAA,EAAKM,OAAN,KAAchB,EAAMoG,YACpB,kBAAC1F,EAAA,EAAKU,KAAN,CAAWN,UAAU,OAClBd,EAAMqG,iBACL,kBAACC,EAAA,EAAD,CAAOxF,UAAU,MAAMI,QAAQ,QAA/B,gBAKHlB,EAAMuG,iBAAiBC,QAAQ,GAAK,EACnC,oCACE,kBAAC9F,EAAA,EAAKU,KAAN,CAAWD,GAAG,MAAML,UAAU,OAC5B,kBAAC2F,EAAA,EAAD,CACEC,MAAK,UAAK1G,EAAMuG,iBAAiBC,QAAQ,GAApC,KACLtF,QACElB,EAAMuG,kBAAoBvG,EAAM2G,iBAC5B,UACA,UAENzI,IAAK8B,EAAMuG,oBAGf,kBAAC7F,EAAA,EAAKU,KAAN,CAAWN,UAAU,OAClBd,EAAM4G,YADT,UAC6B,IAC1B5G,EAAM4G,YAAc5G,EAAM6G,YAF7B,WAMF,kBAACnG,EAAA,EAAKU,KAAN,CAAWD,GAAG,MAAML,UAAU,OAA9B,aAMJ,kBAACJ,EAAA,EAAD,CAAMI,UAAU,kBAAkBqF,GAAG,SACnC,kBAACzF,EAAA,EAAKM,OAAN,KAAchB,EAAM8G,aAClB9G,EAAMqG,iBACN,kBAAC3F,EAAA,EAAKU,KAAN,KACE,kBAACkF,EAAA,EAAD,CAAOxF,UAAU,MAAMI,QAAQ,QAA/B,gBAKHlB,EAAM2G,iBAAiBH,QAAQ,GAAK,EACnC,oCACE,kBAAC9F,EAAA,EAAKU,KAAN,CAAWD,GAAG,MAAML,UAAU,OAC5B,kBAAC2F,EAAA,EAAD,CACEC,MAAK,UAAK1G,EAAM2G,iBAAiBH,QAAQ,GAApC,KACLtF,QACElB,EAAM2G,kBAAoB3G,EAAMuG,iBAC5B,UACA,UAENrI,IAAK8B,EAAM2G,oBAGf,kBAACjG,EAAA,EAAKU,KAAN,CAAWN,UAAU,OAClBd,EAAM6G,YADT,UAC6B,IAC1B7G,EAAM4G,YAAc5G,EAAM6G,YAF7B,WAMF,kBAACnG,EAAA,EAAKU,KAAN,CAAWD,GAAG,MAAML,UAAU,OAA9B,eCrEG,SAASiG,EAAO/G,GAC7B,IAAMpB,EAAWiE,cADmB,EAGZc,mBAAS,IAHG,mBAG7BrE,EAH6B,KAGvB0H,EAHuB,KAgCpC,IAAMX,EAAkBrG,EAAMhD,UAAUC,MAAMkF,SAASnC,EAAM8B,aAAa3F,IACpE8K,EAAkBjH,EAAM7C,UAAUF,MAAMkF,SAASnC,EAAM8B,aAAa3F,IAEpE+K,EAAeb,GAAmBY,EAGxC,SAASE,EAAgB9E,EAAGC,GAC1B,OAAU,IAAND,EAAgB,EACV,IAANC,EAAgB,IAEZ,IAAMD,GADAA,EAAIC,GAIpB,OACE,oCACE,kBAAC4B,EAAA,EAAD,CAAMC,SAAU,SAACC,GAAD,OAzCpB,SAAoBA,GAClBA,EAAEC,iBACF,IAAM+C,EAA0B,cAAT9H,EAEnB8H,GACFxI,EACEQ,EAAgB,CACdG,WAAYS,EAAMT,WAClBC,OAAQQ,EAAM8B,aAAa3F,GAC3BmD,KAAM,eAKP8H,GACHxI,EACEQ,EAAgB,CACdG,WAAYS,EAAMT,WAClBC,OAAQQ,EAAM8B,aAAa3F,GAC3BmD,KAAM,eAsBa+H,CAAWjD,KAClC,kBAACF,EAAA,EAAKoD,MAAN,CACIC,QAAM,EACNb,MAAO1G,EAAMhD,UAAUE,KACvB6B,KAAK,QACL5C,GAAE,mBACFqL,eAAgBnB,EAChBjD,SAAU8D,EACVpC,SAAU,SAACV,GAAD,OAAO4C,EAAQ5C,EAAEW,OAAOC,QAClCA,MAAM,YACNyC,QAAkB,cAATnI,IAGX,kBAAC4E,EAAA,EAAKoD,MAAN,CACEC,QAAM,EACNb,MAAO1G,EAAM7C,UAAUD,KACvB6B,KAAK,QACL5C,GAAE,mBACFqL,eAAgBP,EAChB7D,SAAU8D,EACVpC,SAAU,SAACV,GAAD,OAAO4C,EAAQ5C,EAAEW,OAAOC,QAClCA,MAAM,YACNyC,QAAkB,cAATnI,KAGT4H,GACA,kBAAC1F,EAAA,EAAD,CAAQV,UAAU,OAAOI,QAAQ,UAAUnC,KAAK,SAASiG,MAAM,UAA/D,cAMHkC,GACC,kBAAChB,EAAD,CACEU,YAAa5G,EAAMhD,UAAUC,MAAMsG,OACnCsD,YAAa7G,EAAM7C,UAAUF,MAAMsG,OACnC6C,WAAYpG,EAAMhD,UAAUE,KAC5B4J,WAAY9G,EAAM7C,UAAUD,KAC5BqJ,iBAAkBY,EAChBnH,EAAMhD,UAAUC,MAAMsG,OACtBvD,EAAM7C,UAAUF,MAAMsG,QAExBoD,iBAAkBQ,EAChBnH,EAAM7C,UAAUF,MAAMsG,OACtBvD,EAAMhD,UAAUC,MAAMsG,QAExB8C,gBAAiBA,KCtGZ,SAASqB,IACtB,OACE,kBAACxE,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAACY,EAAA,EAAD,CAAKjB,UAAU,QACb,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,eACb,wBAAIA,UAAU,QAAd,oBCIK,SAAS6G,EAAK3H,GAE3B,IAAM4H,EAAOjC,cAEPkC,EAAQC,cAERvI,EAAaqI,EAAKrG,SAASwG,QAAQF,EAAMD,KAAM,IAG/CvK,EAAWyF,aAAY,SAACC,GAAD,OAAWA,EAAMtG,UAAU8C,MAElDtD,EAAQ6G,aAAY,SAACC,GAAD,OAAWA,EAAM9G,SACvC+L,EAAe3K,EAAW,IAAIY,KAAKZ,EAASN,WAAa,KACzDwD,EAAqBlD,EACrB2K,EAAaxH,mBAAmB,QAAS,CACvCC,SAAU,QAEZ,KAEJ,OACE,oCACGpD,EACC,kBAAC6F,EAAA,EAAD,CAAW/B,GAAG,QACZ,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACtB,EAAA,EAAD,CACEN,MAAO,CAAEO,SAAU,QAASC,SAAU,QAASC,OAAQ,QACvDC,UAAU,yBAEV,kBAACJ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,OAAN,KAAc/E,EAAMoB,EAASP,QAAQV,MACrC,kBAACsE,EAAA,EAAKO,IAAN,CACEC,QAAQ,MACRC,GAAIpB,EACJ3D,KAAMH,EAAMoB,EAASP,QAAQV,KAC7B8D,UAAWjE,EAAMoB,EAASP,QAAQT,YAEpC,kBAACqE,EAAA,EAAKU,KAAN,CAAWN,UAAU,aAArB,YACYP,GAEZ,kBAACG,EAAA,EAAKW,SAAN,CAAeP,UAAU,wBAAzB,uBAGA,kBAACJ,EAAA,EAAKU,KAAN,CAAWD,GAAG,MAAML,UAAU,aAC5B,kBAACiG,EAAD,CACExH,WAAYA,EACZvC,UAAWK,EAASL,UACpBG,UAAWE,EAASF,UACpB2E,aAAc9B,EAAM8B,qBASlC,kBAAC,IAAD,CAAO8F,KAAK,IAAIK,UAAWP,KCrDpB,SAASQ,IAEtB,IAAMtJ,EAAWiE,cAIjBsF,qBAAU,WAERvJ,EAASD,OACR,CAACC,IAEJ,IAAMkD,EAAegB,aAAY,SAACC,GAAD,OAAWA,EAAMjB,gBAElD,OACE,kBAAC,IAAD,KACE,kBAAC2D,EAAD,CAAO3D,aAAcA,IACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8F,KAAK,qBAAqBQ,OAAK,GACnCtG,EAAe,kBAACc,EAAD,CAAWd,aAAcA,IAAmB,kBAAC0D,EAAD,OAE9D,kBAAC,IAAD,CAAOoC,KAAK,gCAAgCQ,OAAK,GAC9CtG,EACC,kBAAC0B,EAAD,CAAa1B,aAAcA,IAE3B,kBAAC0D,EAAD,OAGJ,kBAAC,IAAD,CAAOoC,KAAK,wBAAwBQ,OAAK,GACtCtG,EACC,kBAAC4B,EAAD,CAAa5B,aAAcA,IAE3B,kBAAC0D,EAAD,OAGJ,kBAAC,IAAD,CAAOoC,KAAK,gCACT9F,EAAe,kBAAC6F,EAAD,CAAM7F,aAAcA,IAAmB,kBAAC0D,EAAD,OAGzD,kBAAC,IAAD,CAAOoC,KAAK,IAAIK,UAAWP,MChDfW,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASV,MACvB,2D,YCPSW,kBAAgB,CAC7BvM,MCKa,WAAoC,IAArB8G,EAAoB,uDAAZ,GAAI0F,EAAQ,uCAChD,OAAQA,EAAO1J,MAEb,IrBjBqB,gBqBkBnB,OAAO,2BACFgE,GACA0F,EAAOxM,OAGd,IrBtB2B,kBqBuBzB,OAAO,2BACF8G,GADL,kBAEG0F,EAAOjJ,OAFV,2BAGOuD,EAAM0F,EAAOjJ,SAHpB,IAKIlD,QAAQ,2BACHyG,EAAM0F,EAAOjJ,QAAQlD,SADnB,kBAEJmM,EAAOlJ,WAAakJ,EAAOnJ,WAMpC,IrBnC8B,qBqBoC5B,OAAO,2BACFyD,GADL,kBAEG0F,EAAOjJ,OAFV,2BAGOuD,EAAM0F,EAAOjJ,SAHpB,IAKIlD,QAASqF,OAAOC,KAAKmB,EAAM0F,EAAOjJ,QAAQlD,SACvC4F,QAAO,SAACO,GACP,OAAOA,IAAQgG,EAAOlJ,cAEvBmJ,QAAO,SAACC,EAAKlG,GACZ,OAASkG,EAAIlG,GAAOM,EAAM0F,EAAOjJ,QAAQlD,QAAQmG,GAAMkG,IACtD,QAKT,IrBnD2B,oBqBoDzB,OAAO,2BACF5F,GADL,kBAEG0F,EAAOjJ,OAFV,2BAGOuD,EAAM0F,EAAOjJ,SAHpB,IAII/C,UAAWsG,EAAM0F,EAAOjJ,QAAQ/C,UAAU4B,OAAOoK,EAAOlJ,gBAIhE,QACE,OAAO,eACFwD,KDvDTtG,UEKa,WAAwC,IAArBsG,EAAoB,uDAAZ,GAAI0F,EAAQ,uCACpD,OAAQA,EAAO1J,MAEb,IrBlByB,gBqBmBvB,OAAO,2BACFgE,GACA0F,EAAOhM,WAGd,IrBvBmC,iBqBwBjC,OAAO,2BACFsG,GADL,kBAEG0F,EAAOlJ,WAFV,2BAGOwD,EAAM0F,EAAOlJ,aAHpB,IAKIvC,UAAU,2BACL+F,EAAM0F,EAAOlJ,YAAYvC,WADrB,IAGPC,MAAO8F,EAAM0F,EAAOlJ,YAAYvC,UAAUC,MAAMoB,OAAO,CACrDoK,EAAOjJ,eAMjB,IrBtCqC,mBqBuCnC,OAAO,2BACFuD,GADL,kBAEG0F,EAAOlJ,WAFV,2BAGOwD,EAAM0F,EAAOlJ,aAHpB,IAKIvC,UAAU,2BACL+F,EAAM0F,EAAOlJ,YAAYvC,WADrB,IAGPC,MAAO8F,EAAM0F,EAAOlJ,YAAYvC,UAAUC,MAAMiF,QAAO,SAACjF,GACtD,OAAOA,IAAUwL,EAAOjJ,gBAMlC,IrBrDmC,iBqBsDjC,OAAO,2BACFuD,GADL,kBAEG0F,EAAOlJ,WAFV,2BAGOwD,EAAM0F,EAAOlJ,aAHpB,IAKIpC,UAAU,2BACL4F,EAAM0F,EAAOlJ,YAAYpC,WADrB,IAGPF,MAAO8F,EAAM0F,EAAOlJ,YAAYpC,UAAUF,MAAMoB,OAAO,CACrDoK,EAAOjJ,eAMjB,IrBpEqC,iBqBqEnC,OAAO,2BACFuD,GADL,kBAEG0F,EAAOlJ,WAFV,2BAGOwD,EAAM0F,EAAOlJ,aAHpB,IAKIpC,UAAU,2BACL4F,EAAM0F,EAAOlJ,YAAYvC,WADrB,IAGPC,MAAO8F,EAAM0F,EAAOlJ,YAAYpC,UAAUF,MAAMiF,QAAO,SAACjF,GACtD,OAAOA,IAAUwL,EAAOjJ,gBAMlC,IrBnFwB,eqBoFtB,OAAO,2BACFuD,GADL,kBAEG0F,EAAOtM,GAAK,CACXA,GAAIsM,EAAOtM,GACXW,OAAQ2L,EAAO3L,OACfE,UAAWyL,EAAOzL,UAClBG,UAAWsL,EAAOtL,UAClBJ,UAAW0L,EAAO1L,aAIxB,QACE,OAAO,eACFgG,KF3FTjB,aGEa,WAA6C,IAAvBiB,EAAsB,uDAAd,KAAM0F,EAAQ,uCACzD,OAAQA,EAAO1J,MAGb,IlBjB8B,qBkBkB5B,OAAO,2BACFgE,GACA0F,EAAOrD,MAGd,IlBtB0C,iCkBuBxC,OAAO,2BACFrC,GADL,IAEEE,yBAA0BwF,EAAO9F,UAGrC,IlB3BkB,SkB4BhB,OAAO,KACT,QACE,OAAOI,M,yBC/BE6F,cAAgBC,IAAOC,KCQhCC,EAAmBT,OAAOU,sCAAwCC,IAClEC,EAAQC,YAAYC,EAASL,EAAiBM,IAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAChB,EAAD,OAGFsB,SAASC,eAAe,SN+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9K,MAAK,SAAA+K,GACJA,EAAaC,gBAEd5K,OAAM,SAAAQ,GACLqK,QAAQrK,MAAMA,EAAMsK,c","file":"static/js/main.356efe0d.chunk.js","sourcesContent":["let users = {\n  sarahedo: {\n    id: 'sarahedo',\n    name: 'Sarah Edo',\n    avatarURL: '/1.svg',\n    answers: {\n      '8xf0y6ziyjabvozdd253nd': 'optionOne',\n      '6ni6ok3ym7mf1p33lnez': 'optionTwo',\n      am8ehyc8byjqgar0jgpub9: 'optionTwo',\n      loxhs1bqm25b708cmbf3g: 'optionTwo',\n    },\n    questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9'],\n  },\n  tylermcginnis: {\n    id: 'tylermcginnis',\n    name: 'Tyler McGinnis',\n    avatarURL: '/2.svg',\n    answers: {\n      vthrdm985a262al8qx3do: 'optionOne',\n      xj352vofupe1dqz9emx13r: 'optionTwo',\n    },\n    questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\n  },\n  johndoe: {\n    id: 'johndoe',\n    name: 'John Doe',\n    avatarURL: '/3.svg',\n    answers: {\n      xj352vofupe1dqz9emx13r: 'optionOne',\n      vthrdm985a262al8qx3do: 'optionTwo',\n      '6ni6ok3ym7mf1p33lnez': 'optionTwo',\n    },\n    questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\n  },\n};\n\nlet questions = {\n  '8xf0y6ziyjabvozdd253nd': {\n    id: '8xf0y6ziyjabvozdd253nd',\n    author: 'sarahedo',\n    timestamp: 1467166872634,\n    optionOne: {\n      votes: ['sarahedo'],\n      text: 'have horrible short term memory',\n    },\n    optionTwo: {\n      votes: [],\n      text: 'have horrible long term memory',\n    },\n  },\n  '6ni6ok3ym7mf1p33lnez': {\n    id: '6ni6ok3ym7mf1p33lnez',\n    author: 'johndoe',\n    timestamp: 1468479767190,\n    optionOne: {\n      votes: [],\n      text: 'become a superhero',\n    },\n    optionTwo: {\n      votes: ['johndoe', 'sarahedo'],\n      text: 'become a supervillain',\n    },\n  },\n  am8ehyc8byjqgar0jgpub9: {\n    id: 'am8ehyc8byjqgar0jgpub9',\n    author: 'sarahedo',\n    timestamp: 1488579767190,\n    optionOne: {\n      votes: [],\n      text: 'be telekinetic',\n    },\n    optionTwo: {\n      votes: ['sarahedo'],\n      text: 'be telepathic',\n    },\n  },\n  loxhs1bqm25b708cmbf3g: {\n    id: 'loxhs1bqm25b708cmbf3g',\n    author: 'tylermcginnis',\n    timestamp: 1482579767190,\n    optionOne: {\n      votes: [],\n      text: 'be a front-end developer',\n    },\n    optionTwo: {\n      votes: ['sarahedo'],\n      text: 'be a back-end developer',\n    },\n  },\n  vthrdm985a262al8qx3do: {\n    id: 'vthrdm985a262al8qx3do',\n    author: 'tylermcginnis',\n    timestamp: 1489579767190,\n    optionOne: {\n      votes: ['tylermcginnis'],\n      text: 'find $50 yourself',\n    },\n    optionTwo: {\n      votes: ['johndoe'],\n      text: 'have your best friend find $500',\n    },\n  },\n  xj352vofupe1dqz9emx13r: {\n    id: 'xj352vofupe1dqz9emx13r',\n    author: 'johndoe',\n    timestamp: 1493579767190,\n    optionOne: {\n      votes: ['johndoe'],\n      text: 'write JavaScript',\n    },\n    optionTwo: {\n      votes: ['tylermcginnis'],\n      text: 'write Swift',\n    },\n  },\n};\n\nfunction generateUID() {\n  return (\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  );\n}\n\nexport function _getUsers() {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({ ...users }), 1000);\n  });\n}\n\nexport function _getQuestions() {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({ ...questions }), 1000);\n  });\n}\n\nfunction formatQuestion({ optionOneText, optionTwoText, author }) {\n  return {\n    id: generateUID(),\n    timestamp: Date.now(),\n    author,\n    optionOne: {\n      votes: [],\n      text: optionOneText,\n    },\n    optionTwo: {\n      votes: [],\n      text: optionTwoText,\n    },\n  };\n}\n\nexport function _saveQuestion(question) {\n  return new Promise((res, rej) => {\n    const authedUser = question.author;\n    const formattedQuestion = formatQuestion(question);\n\n    setTimeout(() => {\n      questions = {\n        ...questions,\n        [formattedQuestion.id]: formattedQuestion,\n      };\n\n      users = {\n        ...users,\n        [authedUser]: {\n          ...users[authedUser],\n          questions: users[authedUser].questions.concat([formattedQuestion.id]),\n        },\n      };\n\n      res(formattedQuestion);\n    }, 1000);\n  });\n}\n\nexport function _saveQuestionAnswer({ authedUser, qid, answer }) {\n\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      users = {\n        ...users,\n        [authedUser]: {\n          ...users[authedUser],\n          answers: {\n            ...users[authedUser].answers,\n            [qid]: answer,\n          },\n        },\n      };\n\n      questions = {\n        ...questions,\n        [qid]: {\n          ...questions[qid],\n          [answer]: {\n            ...questions[qid][answer],\n            votes: questions[qid][answer].votes.concat([authedUser]),\n          },\n        },\n      };\n\n      res();\n    }, 500);\n  });\n}\n","/*\n* Mock API handlers\n*/\n\n// import provided mock api functions\nimport {\n  _getUsers,\n  _getQuestions,\n  _saveQuestionAnswer,\n  _saveQuestion,\n} from './_DATA';\n\n/**\n * fetchInitialData\n * \n * @description The fetchInitialData function returns a promise that is fullfilled when _getUsers and _getQUestions have completed execution and returns an object containing all users and all polls.\n * @export function\n * @returns Object\n */\nexport function fetchInitialData() {\n  return Promise.all([_getUsers(), _getQuestions()]).then(\n    ([users, questions]) => {\n      return {\n        users,\n        questions,\n      };\n    }\n  );\n}\n\n/**\n * saveAnswer\n *\n * @description The saveAnswer function just returns the _saveQuestionAnswer provided function\n * @export function \n * @param {Object} info Answer data\n * @returns function\n */\nexport function saveAnswer(info) {\n  return _saveQuestionAnswer(info);\n}\n/**\n * saveQuestion\n *\n * @description The saveQuestion function just returns the _saveQuestion provided function\n * @export function\n * @param {Object} info Question Data\n * @returns function\n */\nexport function saveQuestion(info) {\n  return _saveQuestion(info);\n}\n","// Import mock API handlers functions\nimport { fetchInitialData, saveAnswer, saveQuestion } from '../utils/api';\n/* \nImport actions \n*/\nimport {\n  setUsers,\n  addUserAnswer,\n  removeUserAnswer,\n  addUserQuestion,\n} from './users';\nimport {\n  setQuestions,\n  setQuestionAnswerOne,\n  unsetQuestionAnswerOne,\n  setQuestionAnswerTwo,\n  unsetQuestionAnswerTwo,\n  setQuestion,\n} from './questions';\n\n/**\n * populateStore\n * \n * @description The populateStore thunk returns a functional async action that calls the mock API and dispath the actions to save users and polls data to the store. It takes no arguments and it's dispatched from an hook in App component. \n * @export Function\n * @returns Functional async action\n */\nexport function populateStore() {\n  return (dispatch) => {\n    return fetchInitialData().then(({ users, questions }) => {\n      dispatch(setUsers(users));\n      dispatch(setQuestions(questions));\n    })\n    .catch( () => {\n      alert('Sorry, there was an error retrieving data, please refresh the page.');\n    })\n  };\n}\n\n/**\n * handleSetAnswer\n *\n * @description The handleSetAnswer thunk returns a functional async action that optimistically update state and calls the mock API to save user vote. If the api call fails store change is reverted. \n * @export function\n * @param {Object} info { userId, questionId, vote } \n * @returns Functional async action\n */\nexport function handleSetAnswer(info) {\n  return (dispatch) => {\n    const votingA = info.vote === 'optionOne';\n    votingA ? dispatch(setQuestionAnswerOne(info)) : dispatch(setQuestionAnswerTwo(info));\n    dispatch(addUserAnswer(info));\n    const { userId: authedUser, questionId: qid, vote: answer } = info;\n    const answerData = { authedUser, qid, answer };\n    saveAnswer(answerData)\n      .catch((error) => {\n       votingA ? dispatch(unsetQuestionAnswerOne(info)) : dispatch(unsetQuestionAnswerTwo(info));\n        dispatch(removeUserAnswer(info));\n        alert('Sorry, there was an error saving your answer, please try again.');\n      });\n  };\n}\n\n\n/**\n * handleSaveQuestion\n *\n * @description The handleSaveQuestion thunk returns a functional async action that is dispatched when the user submits a new poll. It calls the moch API first, and if there's no errors, it dispatch the actions to update the store.\n * @export function\n * @param {Object} questionData\n * @returns Functional async action\n */\nexport function handleSaveQuestion(questionData) {\n  return (dispatch) => {\n    return saveQuestion(questionData)\n      .then((res) => {\n        dispatch(setQuestion(res));\n        dispatch(addUserQuestion(res.id, res.author));\n      })\n      .catch((err) => {\n        alert('Sorry, there was an error saving your poll, please try again.');\n      });\n  };\n}\n","/*\n* Action types\n*/\nexport const SET_USERS = 'RECEIVE_USERS';\nexport const ADD_USER_ANSWER = 'SET_USER_ANSWER';\nexport const REMOVE_USER_ANSWER = 'REMOVE_USER_ANSWER';\nexport const ADD_USER_QUESTION = 'ADD_USER_QUESTION';\n\n/*\n* Action creators involving store.users\n*/\n\n/**\n * setUsers action crerator\n * \n * @export Action\n * @description The setUsers action creator returns the action that will be dispatched after the mock api call to save the users object to the store\n * @param {Object} users The users object retrieved from the mock API\n * @returns the plain action object\n */\nexport function setUsers(users) {\n  return {\n    type: SET_USERS,\n    users,\n  };\n}\n/**\n * addUserAnswer action creator\n *\n * @description The addUserAnswer action creator returns the action that will be dispatched to save the user vote in the users slice of the store.\n * @export Action\n * @param {Object} answerData { questionId, userId, vote }\n * @returns the plain action object\n */\nexport function addUserAnswer({ questionId, userId, vote }) {\n  return {\n    type: ADD_USER_ANSWER,\n    userId, questionId, vote,\n  };\n}\n/**\n * removeUserAnswer action creator\n *\n * @description The removeUserAnswer action creator returns the action that will be dispatched to remove the user vote from the users slice of the store. This is necessary because I'm optimistically updating the store on user vote, this action will be dispatched if the api fails.\n * @export Action\n * @param {Object} answerData { questionId, userId, vote }\n * @returns the plain action object\n */\nexport function removeUserAnswer({ questionId, userId, vote }) {\n  return {\n    type: REMOVE_USER_ANSWER,\n    userId, questionId, vote,\n  };\n}\n/**\n * addUserQuestion action creator\n *\n * @description The addUserQuestion action creator returns the action that will be dispatched to add the question id in the user object questions property array.\n * @export Action\n * @param {String} questionId The id of the new question\n * @param {String} userId The user id\n * @returns the plain action object\n */\nexport function addUserQuestion( questionId, userId ) {\n  return {\n    type: ADD_USER_QUESTION,\n    userId, questionId,\n  };\n}\n","/*\n* Action types\n*/\nexport const SET_QUESTIONS = 'GET_QUESTIONS';\nexport const SET_QUESTION_ANSWER_ONE = 'SET_ANSWER_ONE';\nexport const UNSET_QUESTION_ANSWER_ONE = 'UNSET_ANSWER_ONE';\nexport const SET_QUESTION_ANSWER_TWO = 'SET_ANSWER_TWO';\nexport const UNSET_QUESTION_ANSWER_TWO = 'SET_ANSWER_TWO';\nexport const SET_QUESTION = 'SET_QUESTION';\n\n/*\n* Action creators involving store.users\n*/\n\n/**\n * setQuestions action creator\n *\n * @description The setQuestions action creator return the action that will be dispatched after the mock API call to save the questions object to the store.\n * @export Action\n * @param {Object} questions The questions object retrieved from the mock API\n * @returns The plain action object\n */\nexport function setQuestions(questions) {\n  return {\n    type: SET_QUESTIONS,\n    questions,\n  };\n}\n/**\n * setQuestionAnswerOne\n *\n * @description The setQuestionAnswerOne action creator adds the answer to optionOne replies in the questions object.\n * @export Action\n * @param {Object} { questionId, userId }\n * @returns The plain action object\n */\nexport function setQuestionAnswerOne({ questionId, userId }) {\n  return {\n    type: SET_QUESTION_ANSWER_ONE,\n    questionId,\n\n    userId,\n  };\n}\n\n/**\n * unsetQuestionAnswerOne\n *\n * @description The unsetQuestionAnswerOne remove the answer to optionOne replies in the question object.\n * @export Action\n * @param {Object}  { questionId, userId }\n * @returns The plain action object\n */\nexport function unsetQuestionAnswerOne({ questionId, userId }) {\n  return {\n    type: UNSET_QUESTION_ANSWER_ONE,\n    questionId,\n    userId,\n  };\n}\n\n/**\n * setQuestionAnswerTwo\n * \n * @description The setQuestionAnswerTwo action creator adds the answer to optionOne replies in the questions object.\n * @export Action\n * @param {Object} { questionId, userId }\n * @returns The plain action object\n */\nexport function setQuestionAnswerTwo({ questionId, userId }) {\n  return {\n    type: SET_QUESTION_ANSWER_TWO,\n    questionId,\n    userId,\n  };\n}\n\n/**\n * unsetQuestionAnswerTwo\n *\n * @description The unsetQuestionAnswerTwo remove the answer to optionOne replies in the question object.\n * @export Action\n * @param {Object}  { questionId, userId }\n * @returns The plain action object\n */\nexport function unsetQuestionAnswerTwo({ questionId, userId }) {\n  return {\n    type: UNSET_QUESTION_ANSWER_TWO,\n    questionId,\n    userId,\n  };\n}\n\n\n/**\n * setQuestion\n *\n * @description The setQuestion action creator save a new poll in the questions slice of the store.\n * @export Action\n * @param {Object} { id, author, optionOne, optionTwo, timestamp }\n * @returns The plain action object\n */\nexport function setQuestion({ id, author, optionOne, optionTwo, timestamp }) {\n  return {\n    type: SET_QUESTION,\n    id,\n    author,\n    optionOne,\n    optionTwo,\n    timestamp,\n  };\n}\n","import React from 'react';\n\n\n/**\n * Avatar component\n *\n\n * @description The Avatar component takes the url of the user avatar and return an image.\n * @export Component\n * @param {Object} props\n * @param {String} props.avatarUrl The url of the user avatar\n * @returns Children components\n */\nexport default function Avatar(props) {\n  return (\n\n    <img\n      src={\"/would-you-rather/\" + props.avatarUrl}\n      alt={props.name + ' avatar'}\n      style={{ width: '80%' }}\n    ></img>\n\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Avatar from './Avatar';\nimport { Card, Button } from 'react-bootstrap';\n/**\n * PollCard component\n *\n * @description The PollCard component display poll information passed by props by the QuestionsList component.\n * @export Component\n * @param {Object} props\n * @param {string} props.id The poll id\n * @param {Object} props.question The question object saved in the store\n * @param {Object} props.loggedInUser The user logged in, from the store\n * @param {Object} props.users The users saved in the store\n * @returns Children Components\n */\nexport default function PollCard(props) {\n  let questionDate = new Date(props.question.timestamp);\n  let questionDateString = questionDate.toLocaleDateString('en-US', {\n    timeZone: 'UTC',\n  });\n  return (\n    <Card style={{ minWidth: '222px', maxWidth: '300px', margin: 'auto' }} className=\"mb-4 text-center\">\n      <Card.Body>\n      <Card.Header>\n      {props.users[props.question.author].name}   \n      </Card.Header>\n        <Card.Img\n          variant=\"top\"\n          as={Avatar}\n          name={props.users[props.question.author].name}\n          avatarUrl={props.users[props.question.author].avatarURL}\n        />\n        <Card.Text className=\"mb-3 mt-3\">\n       asked on {questionDateString}\n        </Card.Text>\n        <Card.Subtitle className=\"mb-3 mt-3 text-muted\">\n        Would you rather...\n        </Card.Subtitle>\n       \n\n        \n        <Link className=\"float-right\"\n          to={{\n            pathname: `/would-you-rather/questions/${props.question.id}`,\n          }}\n        >\n          <Button variant=\"success\">View poll</Button>\n        </Link>\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from 'react';\nimport PollCard from './PollCard';\nimport { Row, Col } from 'react-bootstrap';\n\n/**\n * QuestionList component\n *\n * @description The QuestionList component filter the questions passed as props by their answered status and user selection, and pass ther data by props to the PollCard component.\n * @export Component\n * @param {Object} props\n * @param {Boolean} props.answered The type of poll to show, selected by the user and saved in the store\n * @param {Object} props.questions The questions saved in the store\n * @param {Object} props.users The users saved in store\n * @param {Object} props.loggedInUser The user actually logged in, from the store\n * @returns Children components\n */\nexport default function QuestionsList(props) {\n  // extract an array of polls ids from the questions object\n  const questionsKeys = Object.keys(props.questions);\n  // extract an array of answered questions from the user object\n  const answeredQuestionsKeys = Object.keys(\n    props.users[props.loggedInUser.id].answers\n  );\n  return (\n    <>\n      <Row>\n        <Col>\n          <p className=\"text-center mb-4\">\n            {props.answered\n              ? 'Answered polls selected'\n              : 'Unanswered polls selected'}\n          </p>\n        </Col>\n      </Row>\n      <Row>\n        {props.answered\n          ? questionsKeys\n              .filter((questionId) => {\n                return answeredQuestionsKeys.includes(questionId);\n              })\n              .sort((a, b) => {\n                return (\n                  props.questions[b].timestamp - props.questions[a].timestamp\n                );\n              })\n              .map((filteredQuestionId) => {\n                return (\n                  <Col key={filteredQuestionId}>\n                    <PollCard\n                      id={filteredQuestionId}\n                      question={props.questions[filteredQuestionId]}\n                      loggedInUser={props.loggedInUser}\n                      users={props.users}\n                    />\n                  </Col>\n                );\n              })\n          : questionsKeys\n              .filter((questionId) => {\n                return !answeredQuestionsKeys.includes(questionId);\n              })\n              .sort((a, b) => {\n                return (\n                  props.questions[b].timestamp - props.questions[a].timestamp\n                );\n              })\n              .map((filteredQuestionId) => {\n                return (\n                  <Col key={filteredQuestionId}>\n                    <PollCard \n                      id={filteredQuestionId}\n                      question={props.questions[filteredQuestionId]}\n                      loggedInUser={props.loggedInUser}\n                      users={props.users}\n                    />\n                  </Col>\n                );\n              })}\n      </Row>\n    </>\n  );\n}\n","/*\n* Action types\n*/\nexport const SET_LOGGED_IN_USER = 'SET_LOGGED_IN_USER';\nexport const SET_DISPLAY_ANSWERED_QUESTIONS = 'SET_DISPLAY_ANSWERED_QUESTIONS';\nexport const LOGOUT = 'LOGOUT';\n\n/*\n* Action creators involving store.loggedInUser\n*/\n\n/**\n * setLoggedInUser\n *\n * @description The setLoggedInUser action creator return an action that is dispatched when the user logs in.\n * @export Action\n * @param {Object} user A copy of store.users[loggedInUser.id] object\n * @returns The plain action creator\n */\nexport function setLoggedInUser(user) {\n  return {\n    type: SET_LOGGED_IN_USER,\n    user,\n  };\n}\n\n/**\n * setDisplayAnsweredQuestions\n * \n * @description The setDisplayAnsweredQuestions action creator returns an action that is dispatched when the user select witch kind polls display on the dashboard. I'm saving this choice in the store instead than in component state so when the user navigate away from the dashboard and then comes back, the component will be rendered based on the user previous choice. \n * @export Action\n * @param {null || bool} display\n * @returns The plain action creator object\n */\nexport function setDisplayAnsweredQuestions(display) {\n  return {\n    type: SET_DISPLAY_ANSWERED_QUESTIONS,\n    display,\n  };\n}\n\n/**\n * logout\n * \n * @description The logout action creator returns the action that will be dispatched when the user log out\n * @export Action\n * @param {undefined} logout\n * @returns The plain action creator object\n */\nexport function logout() {\n  return {\n    type: LOGOUT,\n  };\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport QuestionsList from './Questionslist';\nimport { setDisplayAnsweredQuestions } from '../actions/loggedinuser';\nimport { Row, Col, Container, Button } from 'react-bootstrap';\n/**\n * Dashboard component\n *\n * @description The dashboard component will be rendered for logged in users visiting the homepage.\n * @export Dashboard Component\n * @param {Object} props\n * @param {Object | null} [props.loggedInUser = null] The logged in user object is taken from the store and passed as prop to the dashboard component. If no user is logged in it defaults to null\n * @returns Children components\n */\nexport default function Dashboard(props) {\n  // Grab dispatch reference\n  const dispatch = useDispatch();\n  // Subscribe to the questions in store\n  const questions = useSelector((state) => state.questions);\n  // Subscribe to users in store\n  const users = useSelector((state) => state.users);\n  // Subscribe to displayAnsweredQuestions: the boolean property of loggedInUser in the store based on witch the QuestionList component will render answered or unanswered questions\n  const showAnswered = useSelector(\n    (state) => state.loggedInUser.displayAnsweredQuestions\n  );\n\n  return (\n    <Container as=\"main\">\n      <Row>\n        <Col>\n          <h2 className=\"text-center mt-4 mb-4\">Select polls to display:</h2>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center  mb-4\">\n        <Col sx=\"4\" className=\"text-right m-2\">\n          <Button\n            variant=\"success\"\n            disabled={!showAnswered && true}\n            onClick={() => {\n              dispatch(setDisplayAnsweredQuestions(null));\n            }}\n          >\n            Unanswered\n          </Button>\n        </Col>\n        <Col sx=\"4\" className=\"text-left m-2\">\n          <Button\n            variant=\"success\"\n            disabled={showAnswered && true}\n            onClick={() => {\n              dispatch(setDisplayAnsweredQuestions(true));\n            }}\n          >\n            Answered\n          </Button>\n        </Col>\n      </Row>\n\n      <QuestionsList\n        answered={showAnswered}\n        questions={questions}\n        loggedInUser={props.loggedInUser}\n        users={users}\n      />\n    </Container>\n  );\n}\n","import React from 'react';\nimport Avatar from './Avatar';\nimport { Col, Card } from 'react-bootstrap';\n\n/**\n * UserStats Component\n *\n * @description The userStats component display user informations on the leaderboard\n * @export Component\n * @param {Object} props\n * @param {String} props.id The user id\n * @param {Object} props.users The users object from the store\n * @returns Children components\n */\nexport default function UserStats(props) {\n  return (\n    <Col>\n      <Card\n        style={{ minWidth: '222px', maxWidth: '300px', margin: 'auto' }}\n        className=\"mb-4 text-center justify-content-center\"\n      >\n        <Card.Body>\n        <Card.Header>{props.users[props.id].name}</Card.Header>\n        <Card.Img\n          className=\"text-center justify-content-center\"\n          variant=\"top\"\n          as={Avatar}\n          name={props.users[props.id].name}\n          avatarUrl={props.users[props.id].avatarURL}\n        />\n\n        <Card.Text className=\"mt-4\">\n          Questions: {props.users[props.id].questions.length}\n        </Card.Text>\n        <Card.Text>\n          Answers: {Object.keys(props.users[props.id].answers).length}\n        </Card.Text>\n        <Card.Text>\n          Score:{' '}\n          {props.users[props.id].questions.length +\n            Object.keys(props.users[props.id].answers).length}\n        </Card.Text>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport UserStats from './Userstats';\nimport { Container, Row, Col } from 'react-bootstrap';\n\n/**\n * Leaderboard Component\n *\n * @description The Leaderboard component is rendered at /leaderboard route, it sorts users by answers + questions and return a list of UserStats components ordered by score.\n * @export Component\n * @param {Object} props\n * @param {Object} props.loggedInUser The user currently logged in\n * @returns Children components\n */\n\nexport default function Leaderboard() {\n  // Get the user object from Redux store\n  const users = useSelector((state) => state.users);\n  // Extract an array of user ids\n  const usersIds = Object.keys(users);\n  return (\n    <Container as=\"main\">\n      <Row className=\"mt-4\">\n        <Col className=\"text-center\">\n        <h2 className=\"mt-4\">Leaderboard</h2>\n        </Col>\n      </Row>\n      <Row className=\"mt-4\">\n        {usersIds\n          .sort((a, b) => {\n            return (\n              Object.keys(users[b].answers).length +\n              users[b].questions.length -\n              (Object.keys(users[a].answers).length + users[a].questions.length)\n            );\n          })\n          .map((userId) => {\n            return <UserStats key={userId} id={userId} users={users} />;\n          })}\n      </Row>\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { handleSaveQuestion } from '../actions/shared';\nimport { Redirect } from 'react-router-dom';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\n\n/**\n * NewQuestion component\n *\n * @description The NewQuestion component is rendered at /add, it renders a form that save the new poll in the store, and redirect to homepage when the poll is submitted.\n * @export Component\n * @param {Object} props\n * @param {Object} props.loggedInUser The user presently logged in\n * @returns Children components\n */\nexport default function NewQuestion(props) {\n  // Use component state to handle form data\n  const [optionOneText, setOptionOneText] = useState('');\n  const [optionTwoText, setOptionTwoText] = useState('');\n  // Use component state to handle form submission status\n  const [submitted, setSubmitted] = useState('');\n  const dispatch = useDispatch();\n  // When the user types something in the textareas their content is saved to component state\n  function handleOptionOneTextInput(text) {\n    setOptionOneText(text);\n  }\n  function handleOptionTwoTextInput(text) {\n    setOptionTwoText(text);\n  }\n  // On form submission dispatch the action that save the new poll in the Redux store\n  function handleSubmit(e) {\n    e.preventDefault();\n    const questionData = {\n      author: props.loggedInUser.id,\n      optionOneText,\n      optionTwoText,\n    };\n    dispatch(handleSaveQuestion(questionData)).then((res) => {\n      // After saving the new poll on the Redux store, set the component state in order to redirect to homepage\n      setSubmitted(true);\n    });\n  }\n  return submitted ? (\n    <Redirect\n      to={{\n        pathname: '/would-you-rather/',\n      }}\n    />\n  ) : (\n    <Container as=\"main\">\n      <Row>\n        <Col className=\"m-4 text-center\">\n          <h2>Your question:</h2>\n        </Col>\n      </Row>\n      <Row  className=\"justify-content-center\">\n        <Col className=\"m-8 text-center \" xs=\"12\" sm=\"8\">\n          <Form onSubmit={(e) => handleSubmit(e)}>\n            <Form.Group controlId=\"formOptionOne\">\n              <Form.Label>Would you rather..</Form.Label>\n              <Form.Control\n                size=\"lg\"\n                as=\"textarea\"\n                rows=\"3\"\n                placeholder=\"Enter option one\"\n                onChange={(e) => handleOptionOneTextInput(e.target.value)}\n                value={optionOneText}\n                maxLength={400}\n                required\n              />\n            </Form.Group>\n            <Form.Group controlId=\"formOptionTwo\">\n              <Form.Label>or..</Form.Label>\n              <Form.Control\n                size=\"lg\"\n                as=\"textarea\"\n                rows=\"3\"\n                placeholder=\"Enter option two\"\n                onChange={(e) => handleOptionTwoTextInput(e.target.value)}\n                value={optionTwoText}\n                maxLength={400}\n                required\n              />\n            </Form.Group>\n            <Button type=\"submit\" className=\"mt-4\" variant=\"success\" value=\"submit\">\n              Save poll\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setLoggedInUser } from '../actions/loggedinuser';\nimport { Button, Col } from 'react-bootstrap';\n/**\n * User component\n *\n * @description The User component renders a button that display the user name and dispatch the action to log that user in.\n * @export Component\n * @param {Object} props\n * @param {String} props.name The user name\n * @param {Object} props.user The user object from the store\n * @returns Chuldren components\n */\nexport default function User(props) {\n  const dispatch = useDispatch();\n\n  return (\n    <Col sm=\"12\">\n      <Button variant=\"success\" className=\"m-2\"\n        onClick={() => {\n          dispatch(setLoggedInUser(props.user));\n        }}\n      >\n        {props.name}\n      </Button>\n    </Col>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport User from './User';\nimport { Row, Col } from 'react-bootstrap';\n/**\n * UserList component\n *\n * @description The UserList component is a child of the Login component, it maps the users in store and renders a list of User components with the resulting data.\n * @export Component\n * @returns Children components\n */\nexport default function Userlist() {\n  // Subscribe to the users in the store\n  const users = useSelector((state) => state.users);\n  // Extract an array of user ids from the users object\n  const usersArr = Object.keys(users);\n  return (\n    <Row>\n      <Col>\n      <h2 className=\"text-center mt-4\">Select user:</h2>\n      <Row className=\"mt-4 text-center\">\n        {usersArr.map((userKey) => {\n          return (\n            <User\n              key={users[userKey].id}\n              name={users[userKey].name}\n              user={users[userKey]}\n            ></User>\n          );\n        })}\n      </Row>\n      </Col>\n    </Row>\n  );\n}\n","import React from 'react';\nimport UserList from './Userlist';\nimport { Container } from 'react-bootstrap';\n\n/**\n * Login component\n *\n * @description The Login component will be rendered if the user is not logged in. It wrap the Userlist component\n * @export Component\n * @returns Children components\n */\nexport default function Login() {\n  return (\n    <Container as=\"main\">\n      <UserList />\n    </Container>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logout } from '../actions/loggedinuser';\nimport { Link } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\nimport { useLocation } from 'react-router-dom';\n/**\n * Nav component\n *\n * @description The Nav component renders the navbar. If the user is logged in show the user name and provides a link to log out.\n * @export Component\n * @param {Object} props\n * @param {Object} props.loggedInUser The user currently logged in\n * @returns Children component\n */\nexport default function MyNav(props) {\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  return (\n    <Nav fill variant=\"pills\" defaultActiveKey={location.pathname}>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/would-you-rather/\" eventKey=\"/would-you-rather/\">\n          Dashboard\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/would-you-rather/add\" eventKey=\"/would-you-rather/add\">\n          New poll\n        </Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link as={Link} to=\"/would-you-rather/leaderboard\" eventKey=\"/would-you-rather/leaderboard\">\n          Leaderboard\n        </Nav.Link>\n      </Nav.Item>\n\n      {props.loggedInUser && (\n        <>\n          <Nav.Item>\n            <Nav.Link disabled eventKey=\"username\">\n              Hello {props.loggedInUser.name}\n            </Nav.Link>\n          </Nav.Item>\n\n          <Nav.Item>\n            <Nav.Link\n              eventKey=\"logout\"\n              onClick={() => {\n                dispatch(logout());\n              }}\n            >\n              Logout\n            </Nav.Link>\n          </Nav.Item>\n        </>\n      )}\n    </Nav>\n  );\n}\n","import React from 'react';\n\nimport { ProgressBar, Card, Badge } from 'react-bootstrap';\n\n/**\n * AnswerStats Component\n *\n * @description The AnswerStats component is a children of Answer component and display the poll answers stats.\n * @export Component\n * @param {Object} props\n * @param {Number} props.votesForOne The number of votes for option one\n * @param {Number} props.votesForTwo The number of votes for option two\n * @param {Number} props.percentageForOne The percentage of votes for option one\n * @param {Number} props.percentageForTwo The percentage of votes for option two\n * @param {Bool}   props.userAnsweredOne The current user answer, if false the user answered two\n * @param {String} props.textForOne The text of the first option\n * @param {String} props.textForTwo The text of the second option\n * @returns Children components\n */\nexport default function PollStats(props) {\n  return (\n    <>\n      <Card className=\"mt-4 text-center\">\n        <Card.Header as=\"h3\">Results</Card.Header>\n\n        <Card className=\"m-2 text-center\" bg=\"light\">\n          <Card.Header>{props.textForOne}</Card.Header>\n          <Card.Text className=\"m-2\">\n            {props.userAnsweredOne && (\n              <Badge className=\"m-1\" variant=\"info\">\n                Your answer\n              </Badge>\n            )}\n          </Card.Text>\n          {props.percentageForOne.toFixed(0) > 0 ? (\n            <>\n              <Card.Text as=\"div\" className=\"m-2\">\n                <ProgressBar\n                  label={`${props.percentageForOne.toFixed(0)}%`}\n                  variant={\n                    props.percentageForOne >= props.percentageForTwo\n                      ? 'success'\n                      : 'warning'\n                  }\n                  now={props.percentageForOne}\n                />\n              </Card.Text>\n              <Card.Text className=\"m-2\">\n                {props.votesForOne} out of{' '}\n                {props.votesForOne + props.votesForTwo} votes\n              </Card.Text>\n            </>\n          ) : (\n            <Card.Text as=\"div\" className=\"m-2\">\n              No votes\n            </Card.Text>\n          )}\n        </Card>\n\n        <Card className=\"m-2 text-center\" bg=\"light\">\n          <Card.Header>{props.textForTwo}</Card.Header>\n          {!props.userAnsweredOne && (\n            <Card.Text>\n              <Badge className=\"m-1\" variant=\"info\">\n                Your answer\n              </Badge>\n            </Card.Text>\n          )}\n          {props.percentageForTwo.toFixed(0) > 0 ? (\n            <>\n              <Card.Text as=\"div\" className=\"m-2\">\n                <ProgressBar\n                  label={`${props.percentageForTwo.toFixed(0)}%`}\n                  variant={\n                    props.percentageForTwo >= props.percentageForOne\n                      ? 'success'\n                      : 'warning'\n                  }\n                  now={props.percentageForTwo}\n                />\n              </Card.Text>\n              <Card.Text className=\"m-2\">\n                {props.votesForTwo} out of{' '}\n                {props.votesForOne + props.votesForTwo} votes\n              </Card.Text>\n            </>\n          ) : (\n            <Card.Text as=\"div\" className=\"m-2\">\n              No votes\n            </Card.Text>\n          )}\n        </Card>\n      </Card>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { handleSetAnswer } from '../actions/shared';\nimport { Form, Button } from 'react-bootstrap';\nimport PollStats from './PollStats';\n\n/**\n * Answer Component\n *\n * @description The Answer component is a children of Poll component and display the poll answers. If the poll is already answered by the current user it display stats, if it's not answered it provides the form to answer it.\n * @export Component\n * @param {Object} props\n * @param {String} props.questionId the poll id\n * @param {Object} props.optionOne the poll optionOne object\n * @param {Object} props.optionTwo the poll optionTwo object\n * @param {Object} props.loggedInUser the user currently logged in\n * @returns Children components\n */\nexport default function Answer(props) {\n  const dispatch = useDispatch();\n  // Use React useState Hook to handle form state: it's relative to this component and not needed in the rest of the app, and it doesn't need to be persistent if the user navigate aroud the app, so using redux to handle it would be overkill\n  const [vote, setVote] = useState([]);\n  // Handle form submit\n\n  function handleVote(e) {\n    e.preventDefault();\n    const userAnswersOne = vote === 'OptionOne';\n\n    if (userAnswersOne) {\n      dispatch(\n        handleSetAnswer({\n          questionId: props.questionId,\n          userId: props.loggedInUser.id,\n          vote: 'optionOne',\n        })\n      );\n    }\n\n    if (!userAnswersOne) {\n      dispatch(\n        handleSetAnswer({\n          questionId: props.questionId,\n          userId: props.loggedInUser.id,\n          vote: 'optionTwo',\n        })\n      );\n    }\n  }\n\n  // Decide if the user already answered the poll and what his answer was\n  const userAnsweredOne = props.optionOne.votes.includes(props.loggedInUser.id);\n  const userAnsweredTwo = props.optionTwo.votes.includes(props.loggedInUser.id);\n\n  const userAnswered = userAnsweredOne || userAnsweredTwo;\n\n  // Given two numbers, returns the percentage of the first relative to the total\n  function votesPercentage(a, b) {\n    if (a === 0) return 0;\n    if (b === 0) return 100;\n    const total = a + b;\n    return (100 * a) / total;\n  }\n\n  return (\n    <>\n      <Form onSubmit={(e) => handleVote(e)}>\n      <Form.Check\n          inline\n          label={props.optionOne.text}\n          type=\"radio\"\n          id={`answer-one-radio`}\n          defaultChecked={userAnsweredOne}\n          disabled={userAnswered}\n          onChange={(e) => setVote(e.target.value)}\n          value=\"OptionOne\"\n          checked={vote === \"OptionOne\" }\n        />\n       \n        <Form.Check\n          inline\n          label={props.optionTwo.text}\n          type=\"radio\"\n          id={`answer-two-radio`}\n          defaultChecked={userAnsweredTwo}\n          disabled={userAnswered}\n          onChange={(e) => setVote(e.target.value)}\n          value=\"OptionTwo\"\n          checked={vote === \"OptionTwo\" }\n        />\n\n        {!userAnswered && (\n          <Button className=\"mt-4\" variant=\"success\" type=\"submit\" value=\"submit\">\n            Vote now!\n          </Button>\n        )}\n      </Form>\n\n      {userAnswered && (\n        <PollStats\n          votesForOne={props.optionOne.votes.length}\n          votesForTwo={props.optionTwo.votes.length}\n          textForOne={props.optionOne.text}\n          textForTwo={props.optionTwo.text}\n          percentageForOne={votesPercentage(\n            props.optionOne.votes.length,\n            props.optionTwo.votes.length\n          )}\n          percentageForTwo={votesPercentage(\n            props.optionTwo.votes.length,\n            props.optionOne.votes.length\n          )}\n          userAnsweredOne={userAnsweredOne}\n        />\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n/**\n * Notfound component\n *\n * @description The NotFound component will be rendered when a user visit an url with a non existent poll id or another wrong url. It's just a soft 404 and doesn't actually return a 404 http error code.\n * @export Component\n * @returns Children components\n */\nexport default function Notfound() {\n  return (\n    <Container as=\"main\">\n      <Row className=\"mt-4\">\n        <Col className=\"text-center\">\n          <h2 className=\"mt-4\">Not found 404</h2>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useLocation, useRouteMatch } from 'react-router-dom';\nimport Answer from './Answer';\nimport Notfound from './Notfound';\nimport { Route } from 'react-router-dom';\nimport Avatar from './Avatar';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\n\n/**\n * Poll component\n *\n * @description The Poll component is rendered when a user visit the route /questions/:pollId. It checks if the pollId is in the question store, and loads the NotFoud component if it isn't. If the poll id is valid, it renders the avatar and the user name, and pass the answer data to Answer component.\n * @export Component\n * @param {Object} props\n * @param {Object} props.loggedInUser The user presently logged in\n * @returns Children components\n */\nexport default function Poll(props) {\n  // Call the React router hook to get access to the location object\n  const path = useLocation();\n  // Get the match oject from React router to get the '/questions/' part of the url\n  const match = useRouteMatch();\n  // Extract the final part of the url that shoud be a valid question id\n  const questionId = path.pathname.replace(match.path, '');\n\n  // Subscribe to questions store and get the question object that have the id from the final part of the url\n  const question = useSelector((state) => state.questions[questionId]);\n  // Get the users from the store\n  const users = useSelector((state) => state.users);\n  let questionDate = question ? new Date(question.timestamp) : null;\n  let questionDateString = question\n    ? questionDate.toLocaleDateString('en-US', {\n        timeZone: 'UTC',\n      })\n    : null;\n\n  return (\n    <>\n      {question ? (\n        <Container as=\"main\">\n          <Row>\n            <Col>\n              <Card\n                style={{ minWidth: '222px', maxWidth: '300px', margin: 'auto' }}\n                className=\"mb-4 mt-4 text-center\"\n              >\n                <Card.Body>\n                  <Card.Header>{users[question.author].name}</Card.Header>\n                  <Card.Img\n                    variant=\"top\"\n                    as={Avatar}\n                    name={users[question.author].name}\n                    avatarUrl={users[question.author].avatarURL}\n                  />\n                  <Card.Text className=\"mb-3 mt-3\">\n                    asked on {questionDateString}\n                  </Card.Text>\n                  <Card.Subtitle className=\"mb-3 mt-3 text-muted\">\n                    Would you rather...\n                  </Card.Subtitle>\n                  <Card.Text as=\"div\" className=\"mb-3 mt-3\">\n                    <Answer\n                      questionId={questionId}\n                      optionOne={question.optionOne}\n                      optionTwo={question.optionTwo}\n                      loggedInUser={props.loggedInUser}\n                    />\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      ) : (\n        <Route path=\"*\" component={Notfound} />\n      )}\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { populateStore } from '../actions/shared';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Leaderboard from './Leaderboard';\nimport NewQuestion from './Newquestion';\nimport Login from './Login';\nimport MyNav from './Nav';\nimport Poll from './Poll';\nimport Notfound from './Notfound';\n\n/**\n * Main component\n *\n * @description The App component loads initial data from the mock API and saves it to the Redux store in an useEffect hook,\n * it checks if the user is logged in and handles routing using react-router.\n\n * @export Component\n\n * @returns Children components\n */\nexport default function App() {\n  // Grab dispatch from react-redux\n  const dispatch = useDispatch();\n\n\n  // Pass dispatch reference to useEffect hook in the dependecy array, useDispatch is memoized, so the hook will run once.\n  useEffect(() => {\n    // Dispatch the Asynch action that call the mock API and save data to the Redux store\n    dispatch(populateStore());\n  }, [dispatch]);\n  // Subscribe to the store to get the authenticated user, the default value of loggedInUser is null\n  const loggedInUser = useSelector((state) => state.loggedInUser);\n\n  return (\n    <Router>\n      <MyNav loggedInUser={loggedInUser} />\n      <Switch>\n        <Route path=\"/would-you-rather/\" exact>\n          {loggedInUser ? <Dashboard loggedInUser={loggedInUser} /> : <Login />}\n        </Route>\n        <Route path=\"/would-you-rather/leaderboard\" exact>\n          {loggedInUser ? (\n            <Leaderboard loggedInUser={loggedInUser} />\n          ) : (\n            <Login />\n          )}\n        </Route>\n        <Route path=\"/would-you-rather/add\" exact>\n          {loggedInUser ? (\n            <NewQuestion loggedInUser={loggedInUser} />\n          ) : (\n            <Login />\n          )}\n        </Route>\n        <Route path=\"/would-you-rather/questions/\">\n          {loggedInUser ? <Poll loggedInUser={loggedInUser} /> : <Login />}\n        </Route>\n\n        <Route path=\"*\" component={Notfound} />\n      </Switch>\n  \n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n* Root reducer\n*/\n\nimport { combineReducers } from 'redux';\n// Reducers imports\nimport users from './users';\nimport questions from './questions';\nimport loggedInUser from './loggedinuser';\n\n// Combine reducers\nexport default combineReducers({\n  users,\n  questions,\n  loggedInUser,\n});\n","// Import action types\nimport {\n  SET_USERS,\n  ADD_USER_ANSWER,\n  REMOVE_USER_ANSWER,\n  ADD_USER_QUESTION,\n} from '../actions/users';\n\n/**\n * users Reducer\n * \n * @description The users reducer will handle actions that update store.users \n * @export reducer\n * @param {Object} [state={}] store.users defaults to an empty object\n * @param {Object} action\n * @returns The updated store.user property\n */\nexport default function users(state = {}, action) {\n  switch (action.type) {\n    // The action dispatched at first load save all users to the store\n    case SET_USERS:\n      return {\n        ...state,\n        ...action.users,\n      };\n    // The action dispatched when the user answers a poll, adds a property to the store.users[userId].answers object using the question id as key and the vote as value\n    case ADD_USER_ANSWER:\n      return {\n        ...state,\n        [action.userId]: {\n          ...state[action.userId],\n\n          answers: {\n            ...state[action.userId].answers,\n            [action.questionId]: action.vote,\n          },\n        },\n      };\n\n    // As the previous action is dispatched before calling the mock api, here's the action to revert the change should the mock API call fail\n    case REMOVE_USER_ANSWER:\n      return {\n        ...state,\n        [action.userId]: {\n          ...state[action.userId],\n\n          answers: Object.keys(state[action.userId].answers)\n            .filter((key) => {\n              return key !== action.questionId;\n            })\n            .reduce((obj, key) => {\n              return ( obj[key] = state[action.userId].answers[key], obj )\n            }, {}),\n        },\n      };\n\n      // The action dispatched when the user save a new poll, adds the question id to store.users[userId].questions array\n      case ADD_USER_QUESTION:\n        return {\n          ...state,\n          [action.userId]: {\n            ...state[action.userId], \n            questions: state[action.userId].questions.concat(action.questionId),\n          },\n        };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","// Import action types\n// TODO: oneline, I'm importing from the same file, why did I shift + alt + arrowed down this?\nimport { SET_QUESTIONS } from '../actions/questions';\nimport { SET_QUESTION_ANSWER_ONE } from '../actions/questions';\nimport { UNSET_QUESTION_ANSWER_ONE } from '../actions/questions';\nimport { SET_QUESTION_ANSWER_TWO } from '../actions/questions';\nimport { UNSET_QUESTION_ANSWER_TWO } from '../actions/questions';\nimport { SET_QUESTION } from '../actions/questions';\n\n/**\n * questions Reducer\n * \n * @description The questions Reducer will handle actions that update store.questions\n * @export reducer\n * @param {Object} [state={}] store.questions defaults to an empty object\n * @param {Object} action\n * @returns The updated store.questions property\n */\nexport default function questions(state = {}, action) {\n  switch (action.type) {\n    // The action dispatched at first load save all questions to the store\n    case SET_QUESTIONS:\n      return {\n        ...state,\n        ...action.questions,\n      };\n    // The action dispatched when the user vote for an option one adds that user id to the question optionOne.votes array\n    case SET_QUESTION_ANSWER_ONE:\n      return {\n        ...state,\n        [action.questionId]: {\n          ...state[action.questionId],\n\n          optionOne: {\n            ...state[action.questionId].optionOne,\n\n            votes: state[action.questionId].optionOne.votes.concat([\n              action.userId,\n            ]),\n          },\n        },\n      };\n    // The action dispatched when the optimistic update fails removes the user id from the question optionOne.votes array\n    case UNSET_QUESTION_ANSWER_ONE:\n      return {\n        ...state,\n        [action.questionId]: {\n          ...state[action.questionId],\n\n          optionOne: {\n            ...state[action.questionId].optionOne,\n\n            votes: state[action.questionId].optionOne.votes.filter((votes) => {\n              return votes !== action.userId;\n            }),\n          },\n        },\n      };\n    // The action dispatched when the user vote for an option two adds that user id to the question optionTwo.votes array\n    case SET_QUESTION_ANSWER_TWO:\n      return {\n        ...state,\n        [action.questionId]: {\n          ...state[action.questionId],\n\n          optionTwo: {\n            ...state[action.questionId].optionTwo,\n\n            votes: state[action.questionId].optionTwo.votes.concat([\n              action.userId,\n            ]),\n          },\n        },\n      };\n    // The action dispatched when the optimistic update fails removes the user id from the question optionTwo.votes array\n    case UNSET_QUESTION_ANSWER_TWO:\n      return {\n        ...state,\n        [action.questionId]: {\n          ...state[action.questionId],\n\n          optionTwo: {\n            ...state[action.questionId].optionOne,\n\n            votes: state[action.questionId].optionTwo.votes.filter((votes) => {\n              return votes !== action.userId;\n            }),\n          },\n        },\n      };\n    // The action dispatched when an user adds a new poll adds a new proprerty to store.questions using the question id as property name.\n    case SET_QUESTION:\n      return {\n        ...state,\n        [action.id]: {\n          id: action.id,\n          author: action.author,\n          optionOne: action.optionOne,\n          optionTwo: action.optionTwo,\n          timestamp: action.timestamp,\n        },\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","// Import action types\nimport {\n  SET_LOGGED_IN_USER,\n  SET_DISPLAY_ANSWERED_QUESTIONS,\n  LOGOUT,\n} from '../actions/loggedinuser';\n\n/**\n * loggedinUser Reducer\n * \n * @description The loggedinUser Reducer will handle actions targetting store.loggedInUser\n * @export reducer\n * @param {Object} [state=null] store.loggedInUser, default value is null.\n * @param {Object} action\n * @returns The updated loggedInUser store property\n */\nexport default function loggedinUser(state = null, action) {\n  switch (action.type) {\n    // The action dispatched for logins copy store.users[selectedUser] in store.loggedInUser \n    // TODO: decide if it really need to spread previus state, it shouldn't.\n    case SET_LOGGED_IN_USER:\n      return {\n        ...state,\n        ...action.user,\n      };\n    // The action dispatched when the user select witch kind of polls should be displayed on the dashboard, save a boolean value in store.loggedInUser.displayAnsweredQuestions\n    case SET_DISPLAY_ANSWERED_QUESTIONS:\n      return {\n        ...state,\n        displayAnsweredQuestions: action.display,\n      };\n    // The action dispatched to log out resets store.loggedInUser to its null default value\n    case LOGOUT:\n      return null;\n    default:\n      return state;\n  }\n}\n","import { applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nexport default applyMiddleware(thunk, logger);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport middleware from './middleware';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(middleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}